
@{
    ViewBag.Title = "User";
}


<div class="max-w-6xl mx-auto">
    <form id="userForm">
        <div class="shadow-lg rounded-xl bg-white p-3">
            <div class="flex justify-between items-center">
                <h2 class="text-2xl font-semibold text-gray-700 flex items-center gap-2">
                    <i class="fa-solid fa-users w-6 h-6"></i> User
                </h2>
                <div>
                    <button type="submit" class="mt-1 text-white bg-green-600 hover:bg-green-800 font-medium rounded-lg text-sm px-5 py-2.5">Save</button>
                    <button type="reset" class="mt-1 text-white bg-yellow-400 hover:bg-yellow-500 font-medium rounded-lg text-sm px-5 py-2.5">Reset</button>
                </div>
            </div>
        </div>

        <div class="shadow-lg rounded-xl bg-white p-3 mt-7">
            <div class="grid grid-cols-2 gap-2 m-2">
                <div>
                    <label class="font-semibold">Current Date</label>
                    <input id="current_date" readonly name="current_date" class="w-full mt-1 p-2 border border-gray-300 rounded" type="date" required />
                </div>
                <div>
                    <label class="font-semibold">Name</label>
                    <input id="name" name="name" class="w-full mt-1 p-2 border border-gray-300 rounded" type="text" required />
                </div>

            </div>

            <div class="grid grid-cols-2 gap-2 m-2">
                <div>
                    <label class="font-semibold">Email</label>
                    <input id="email" name="email" class="w-full mt-1 p-2 border border-gray-300 rounded" type="email" required />
                </div>
                <div>
                    <label class="font-semibold">Password</label>
                    <input id="password" name="password" class="w-full mt-1 p-2 border border-gray-300 rounded" type="password" required />
                </div>

            </div>

            <div class="grid grid-cols-2 gap-2 m-2">
                <div>
                    <label class="font-semibold">Phone Number</label>
                    <input id="phone_number" name="phone_number" class="w-full mt-1 p-2 border border-gray-300 rounded" type="tel" required />
                </div>
                <div>
                    <label class="font-semibold">Address</label>
                    <input id="address"  name="address" class="w-full mt-1 p-2 border border-gray-300 rounded" type="text" required />
                </div>

            </div>

            <div class="grid grid-cols-2 gap-2 m-2">
                <div>
                    <label class="font-semibold">Role</label>
                    <select id="roleId" name="roleId" class="w-full mt-1 p-2 border border-gray-300 rounded">
                    </select>
                </div>
                <div class="flex items-center space-x-3">
                    <label for="status" class="font-semibold text-gray-700 cursor-pointer select-none">
                        Status
                    </label>
                    <input type="checkbox"
                           id="status"
                           name="status"
                           class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-2 focus:ring-blue-500 transform scale-150 cursor-pointer">
                </div>
            </div>

        </div>
    </form>

    <div class="shadow-md rounded-xl bg-white p-6 mt-7">
        <h2 class="text-2xl font-semibold text-gray-700 flex items-center gap-2">
            <i class="fa-solid fa-list-check w-6 h-6"></i> User List
        </h2>
        <div class="overflow-x-auto mt-2">
            <table class="min-w-full text-sm text-left" id="userTable">
                <thead class="bg-gray-100 text-xs uppercase text-gray-500">
                    <tr>
                        <th class="px-4 py-2">ID</th>
                        <th class="px-4 py-2">Current Date</th>
                        <th class="px-4 py-2">Name</th>
                        <th class="px-4 py-2">Email</th>
                        <th class="px-4 py-2">Phone Number</th>
                        <th class="px-4 py-2">Address</th>
                        <th class="px-4 py-2">Role</th>
                        <th class="px-4 py-2">Status</th>
                        <th class="px-4 py-2">Action</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>

<script>
    const getStatusColor = (status) => {
        switch (status?.toLowerCase()) {
            case 'Active': return 'bg-green-100 text-green-800';
            case 'Inactive': return 'bg-red-100 text-red-800';
            default: return 'bg-gray-100 text-gray-800';
        }
    }
    const loadRoles = async () => {
        try {
            const resp = await fetch('/Role/Get');
            const roles = await resp.json();
            const roleSelect = document.getElementById('roleId');
            roleSelect.innerHTML = '<option value="">Select Role</option>';
            roles.forEach(role => {
                let opt = document.createElement('option');
                opt.value = role.Id;
                opt.textContent = role.role_name;
                roleSelect.appendChild(opt);
            });
        } catch (error) {
            console.error('Error loading roles', error);
        }
    };


    const getDate = () => {
        const today = new Date();
        return today.toISOString().split('T')[0];
    };
    document.getElementById('current_date').value = getDate();

    let editId = 0;
    const formatDateForDisplay = (dateString) => {
        if (!dateString) return '';
        return dateString;
    };
    const tableBody = document.querySelector('#userTable tbody');


    const getUser= async () => {
        try {
            const resp = await fetch('/User/GetUser');
            const data = await resp.json();
            console.log(data);
            if (Array.isArray(data)) {
                tableBody.innerHTML = "";
                data.forEach(user => {
                    const tr = document.createElement("tr");
                    tr.innerHTML = `
                 <td class="px-4 py-2">${user.Id}</td>
                 <td class="px-4 py-2">${formatDateForDisplay(user.current_date) ? user.current_date.split('T')[0] : ''}</td>
                 <td class="px-4 py-2">${user.name}</td>
                 <td class="px-4 py-2">${user.email}</td>
                 <td class="px-4 py-2">${user.phone_number}</td>
                 <td class="px-4 py-2">${user.address}</td>
                 <td class="px-4 py-2">${user.status}</td>
                 <td class="px-4 py-2">${user.roleId}</td>
                 <td class="px-4 py-2">
                     <button onclick="editUser(${user.Id})" class="text-blue-600 hover:underline">Edit</button>
                     <button onclick="deleteUser(${user.Id})" class="text-red-600 hover:underline ml-2">Delete</button>
                 </td>
             `;
                    tableBody.appendChild(tr);
                });
            } else {
                tableBody.innerHTML = `<tr><td colspan="4" class="text-center py-2">No roles found</td></tr>`;
            }
        } catch (error) {
            console.error('Error fetching User', error);
        }
    };

    const deleteUser= async (id) => {
        if (!confirm("Are you sure?")) return;
        try {
            const res = await fetch('/User/Delete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id })
            });
            const data = await res.json();
            alert(data.message);
            if (data.status === 200) {
                getUser();
            }
        } catch (error) {
            console.error('Error deleting Permission', error);
        }
    };

    const editUser= async (id) => {
        try {
            const resp = await fetch(`/User/Edit?id=${id}`);
            const user = await resp.json();
            if (user && user.Id) {
                document.getElementById('current_date').value = user.current_date;
                document.getElementById('name').value = user.name;
                document.getElementById('email').value = user.email;
                document.getElementById('password').value = user.password;
                document.getElementById('phone_number').value = user.phone_number;
                document.getElementById('address').value = user.address;
                document.getElementById('status').value = user.status;
                document.getElementById('roleId').value = user.roleId;
                editId = user.Id;
            }
        } catch (error) {
            console.error('Error fetching Permission for edit', error);
        }
    };

    document.getElementById('userForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        let saveObj = {
            Id: editId,
            current_date: document.getElementById('current_date').value.trim(),
            roleId: document.getElementById('roleId').value,
            status: document.getElementById('status').checked,
            name: document.getElementById('name').value,
            email: document.getElementById('email').value,
            password: document.getElementById('password').value,
            phone_number: document.getElementById('phone_number').value,
            address: document.getElementById('address').value,
        };

        try {
            const resp = await fetch('/User/Create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(saveObj),
            });
            const data = await resp.json();
            alert(data.message);
            if (data.status === 200) {
                this.reset();
                document.getElementById('current_date').value = getDate();
                editId = 0;
                getUser();
            }
        } catch (error) {
            console.error('Error saving Permission:', error);
            alert('Something went wrong');
        }
    });

    document.querySelector('button[type="reset"]').addEventListener('click', function () {
        editId = 0;
        document.getElementById('current_date').value = getDate();
    });

    loadRoles();
    getUser();

</script>

