
@{
    ViewBag.Title = "Module";
}


<div class="max-w-6xl mx-auto">
    <form id="roleForm">
        <div class="shadow-lg rounded-xl bg-white p-3">
            <div class="flex justify-between items-center">
                <h2 class="text-2xl font-semibold text-gray-700 flex items-center gap-2">
                    <i class="fa-solid fa-boxes w-6 h-6"></i> Module
                </h2>
                <div>
                    <button type="submit" class="mt-1 text-white bg-green-600 hover:bg-green-800 font-medium rounded-lg text-sm px-5 py-2.5">Save</button>
                    <button type="reset" class="mt-1 text-white bg-yellow-400 hover:bg-yellow-500 font-medium rounded-lg text-sm px-5 py-2.5">Reset</button>
                </div>
            </div>
        </div>

        <div class="shadow-lg rounded-xl bg-white p-3 mt-7">
            <div class="grid grid-cols-2 gap-2 m-2">
                <div>
                    <label class="font-semibold">Current Date</label>
                    <input id="current_date" readonly name="current_date" class="w-full mt-1 p-2 border border-gray-300 rounded" type="date" required />
                </div>
                <div>
                    <label class="font-semibold">Module Name</label>
                    <input id="module_name" name="module_name" class="w-full mt-1 p-2 border border-gray-300 rounded" type="text" required />
                </div>
            </div>
            <div class="grid grid-cols-2 gap-2 m-2">
                <div>
                    <label class="font-semibold">Module Icon</label>
                    <input id="module_icon" name="module_icon" class="w-full mt-1 p-2 border border-gray-300 rounded" type="text" required />
                </div>
                <div>
                    <label class="font-semibold">Module Href</label>
                    <input id="href" name="href" class="w-full mt-1 p-2 border border-gray-300 rounded" type="text" required />
                </div>
            </div>
        </div>
    </form>

    <div class="shadow-md rounded-xl bg-white p-6 mt-7">
        <h2 class="text-2xl font-semibold text-gray-700 flex items-center gap-2">
            <i class="fa-solid fa-list-check w-6 h-6"></i> Module List
        </h2>
        <div class="overflow-x-auto mt-2">
            <table class="min-w-full text-sm text-left" id="moduleTable">
                <thead class="bg-gray-100 text-xs uppercase text-gray-500">
                    <tr>
                        <th class="px-4 py-2">ID</th>
                        <th class="px-4 py-2">Current Date</th>
                        <th class="px-4 py-2">Module Name</th>
                        <th class="px-4 py-2">Module Icon</th>
                        <th class="px-4 py-2">Module Href</th>
                        <th class="px-4 py-2">Action</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>
<script>
    const getDate = () => {
        const today = new Date();
        return today.toISOString().split('T')[0];
    };
    const formatDateForDisplay = (dateString) => {
        if (!dateString) return '';
        return dateString;
    };
    document.getElementById('current_date').value = getDate();
    const tableBody = document.querySelector('#moduleTable tbody');
    let editId = 0;
    const getModule = async () => {
        try {
            const resp = await fetch('/Module/Get');
            const data = await resp.json();
            if (Array.isArray(data)) {
                tableBody.innerHTML = "";
                data.forEach(mod => {
                    const tr = document.createElement("tr");
                    tr.innerHTML = `
                        <td class="px-4 py-2">${mod.Id}</td>
                        <td class="px-4 py-2">${formatDateForDisplay(mod.current_date) ? mod.current_date.split('T')[0] : ''}</td>
                        <td class="px-4 py-2">${mod.module_name}</td>
                         <td class="px-4 py-2">${mod.module_icon}</td>
                          <td class="px-4 py-2">${mod.href}</td>
                        <td class="px-4 py-2">
                            <button onclick="editModule(${mod.Id})" class="text-blue-600 hover:underline">Edit</button>
                            <button onclick="deleteModule(${mod.Id})" class="text-red-600 hover:underline ml-2">Delete</button>
                        </td>
                    `;
                    tableBody.appendChild(tr);
                });
            } else {
                tableBody.innerHTML = `<tr><td colspan="4" class="text-center py-2">No roles found</td></tr>`;
            }
        } catch (error) {
            console.log('Error fetching roles', error);
        }
    };

    const deleteModule = async (id) => {
        if (!confirm("Are you sure?")) return;
        try {
            const res = await fetch('/Module/Delete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id })
            });
            const data = await res.json();
            alert(data.message);
            if (data.status === 200) {
                getModule();
            }
        } catch (error) {
            console.log('Error deleting role', error);
        }
    };

    const editModule = async (id) => {
        try {
            const resp = await fetch(`/Module/Edit?id=${id}`);
            const module = await resp.json();
            if (module && module.Id) {
                document.getElementById('current_date').value = module.current_date ? module.current_date.split('T')[0] : '';
                document.getElementById('module_name').value = module.module_name;
                document.getElementById('module_icon').value = module.module_icon;
                document.getElementById('href').value = module.href;
                editId = module.Id;
            }
        } catch (error) {
            console.log('Error fetching role for edit', error);
        }
    };

    document.getElementById('roleForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        let saveObj = {
            Id: editId,
            current_date: document.getElementById('current_date').value.trim(),
            module_name: document.getElementById('module_name').value.trim(),
            module_icon: document.getElementById('module_icon').value.trim(),
            href: document.getElementById('href').value.trim()
        };

        try {
            const resp = await fetch('/Module/Create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(saveObj),
            });
            const data = await resp.json();
            alert(data.message);
            if (data.status === 200) {
                this.reset();
                document.getElementById('current_date').value = getDate();
                editId = 0;
                getModule();
            }
        } catch (error) {
            console.error('Error saving role:', error);
            alert('Something went wrong');
        }
    });

    getModule();
</script>


